<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!--在application.yml实现传参-->
    <!--application.yml 传递参数，不能使用logback 自带的<property>标签 -->
    <springProperty name="logHome" scope="context" source="logging.path"/>

    <springProperty name="appName" scope="context" source="spring.application.name"/>

    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS}|${appName}|%thread|%level|%logger|%msg%n"/>

    <!--控制台输出ConsoleAppender-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--<pattern>${pattern}</pattern>-->
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </layout>
    </appender>
    <!--自动压缩已经打出来的log  RollingFileAppender在产生新文件的时候，
    会自动压缩已经打出来的日志文件-->
    <!--RollingFileAppender用于切分文件日志-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
   所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--过滤 Error-->
            <!--<level>ERROR</level>-->
            <!--匹配到就禁止-->
            <!--<onMatch>DENY</onMatch>-->
            <!--没有匹配到就允许-->
            <!--<onMismatch>ACCEPT</onMismatch>-->
        <!--</filter>-->


        <file>${logHome}/${appName}.log</file>
        <!--自动去除旧的日志文件  通过设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，
        你可以控制已经产生日志文件的最大数量。
        如果设置maxHistory 12，那那些log文件超过12个月的都会被自动移除。-->
        <!---滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <fileNamePattern>${logHome}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>

            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>500MB</totalSizeCap>-->


            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--日志文件大小-->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>


        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${pattern}</pattern>
        </layout>

        <!--临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；
        当日志级别低于临界值时，日志会被拒绝。-->

        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>ERROR</level>-->
        <!--</filter>-->

    </appender>
    <!--日志输出级别-->
    <root level="INFO">
        <!--输出-->
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </root>
    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <logger name="com.vanke.controller" level="info" />
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.vanke.controller" level="ERROR" />
    </springProfile>
    <logger name="sun.rmi.loader" level="WARN"/>
    <logger name="com.zaxxer.hikari" level="WARN"/>
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.http" level="WARN"/>
    <logger name="com.ulisesbocchio" level="WARN"/>
    <logger name="com.netflix.discovery" level="WARN"/>
</configuration>